<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on XH&#39;s Blog</title>
        <link>https://whistleditty.github.io/posts/</link>
        <description>Recent content in Posts on XH&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 21 Dec 2024 21:52:58 +0800</lastBuildDate>
        <atom:link href="https://whistleditty.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>学习与自己的情绪共处 ——《头脑特工队2》我的2024年度电影</title>
            <link>https://whistleditty.github.io/posts/%E5%AD%A6%E4%B9%A0%E4%B8%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%83%85%E7%BB%AA%E5%85%B1%E5%A4%84-%E5%A4%B4%E8%84%91%E7%89%B9%E5%B7%A5%E9%98%9F2%E6%88%91%E7%9A%842024%E5%B9%B4%E5%BA%A6%E7%94%B5%E5%BD%B1/</link>
            <pubDate>Sat, 21 Dec 2024 21:52:58 +0800</pubDate>
            
            <guid>https://whistleditty.github.io/posts/%E5%AD%A6%E4%B9%A0%E4%B8%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%83%85%E7%BB%AA%E5%85%B1%E5%A4%84-%E5%A4%B4%E8%84%91%E7%89%B9%E5%B7%A5%E9%98%9F2%E6%88%91%E7%9A%842024%E5%B9%B4%E5%BA%A6%E7%94%B5%E5%BD%B1/</guid>
            <description>&lt;pre&gt;&lt;code&gt;2024就要这么过去了
&lt;/code&gt;&lt;/pre&gt;</description>
            <content type="html"><![CDATA[<pre><code>2024就要这么过去了
</code></pre>
<p>思来想去，《头脑特工队2》大概是我2024年最爱的电影了。这部电影最触动我的，是它将情绪拟人化，描绘了他们的多样性和共存方式。快乐、悲伤、愤怒、焦虑……他们都没有绝对的好与坏，正是这些情绪交织在一起，才构成了完整的自我。如果要定义我的情绪小队，或许和电影主角一样，“焦焦”是那个随时准备吹哨的大脑守卫者，它让我时刻保持清醒，却也让我常常疲惫</p>
<h2 id="成长中的情绪快乐去哪了">成长中的情绪：“快乐”去哪了？</h2>
<p>　　小时候的快乐似乎唾手可得。杂货店的小玩具、学校旁的无骨鸡柳，甚至是看窗外的云都能让人开心。越长大却越发现，快乐不再是每天的主旋律。它不像小时候那样明目张胆地跳出来，而是变得更加隐秘。有时候觉得快乐藏了起来，甚至怀疑它是不是消失了。但其实，快乐一直都在，只是可能被更强烈的情绪掩盖了。焦虑、恐惧和愤怒会占据主导，让快乐显得渺小而脆弱。</p>
<p>　　那么，如何呼唤隐藏的快乐？靠的是<strong>主动寻找</strong>。快乐不是等来的，而是我们内心对生活发出的邀请。</p>
<h2 id="情绪的本质中立而有意义">情绪的本质：中立而有意义</h2>
<p>　　我们常常把情绪简单分类：快乐是好的，悲伤是坏的；愤怒是不应该的，平静才是值得追求的。但事实并非如此。情绪本身是<strong>中立</strong>的，它们是我们与生活的连接方式。</p>
<p>　　当我学会觉察情绪时，我发现自己开始理解它们存在的意义。比如，在一个失望的时刻，我会对自己说：“喔，这是悲伤来了。”在一个让人心慌的场景里，我会察觉：“这就是焦虑正在发挥作用。”这种觉察让我意识到，每种情绪的到来都有它的理由，都是为了让我更好地感受自己、保护自己。</p>
<p>　　<strong>情绪不是要被控制的东西，而是我们与自己对话的语言。</strong></p>
<h2 id="面对焦虑接纳还是对抗">面对焦虑，接纳还是对抗？</h2>
<p>　　焦虑，是我情绪小队中最有存在感的成员。它让我害怕犯错，担忧未来，甚至时常幻听电话震动。曾经，我一直想摆脱这种“糟糕”的感觉，告诉自己“不要焦虑”，但结果却是焦虑愈演愈烈。后来，我尝试换一种方式，与焦虑共处。就像电影里展现的那样，<strong>焦虑从来不是敌人，它更像是一位紧张过度的朋友</strong>，需要我去倾听、安抚，而不是试图赶走它。焦虑的到来不是为了折磨我，而是为了提醒我注意一些问题。</p>
<p>　　拥抱焦虑的关键不是“消灭它”，是<strong>允许它存在</strong>，并逐渐在与它的相处中找到成长的契机。焦虑并没有那么可怕，它可能只是你内心的一种求变信号。尝试从小事开始练习接纳，专注于当下的行动，并给予自己足够的耐心，就像农民不要责怪庄稼长得不够快，要学会尊重规律。</p>
<p>接纳并臣服于任何情绪。我们每个人可能像自己的父母，但更像这个时代。</p>
<h2 id="拥抱完整的自己">拥抱完整的自己</h2>
<p>　　或许，《头脑特工队2》想告诉我们的是：每个人的情绪小队，都是为了帮助自己更好地活下去。焦虑、恐惧、愤怒，<strong>它们并不总是令人愉快，但它们存在的意义不可忽视。</strong></p>
<p>　　当我们试图拥抱所有情绪，而不是排斥那些“负面”的部分时，我们才能真正接近完整的自我。焦虑并不可怕，愤怒也不丢脸，悲伤更不是软弱。它们是我们的同伴，是生活中的路标。</p>
<p>　　“快乐去哪了？”这是电影留给我的问题，也是我留给自己的问题。快乐没有消失，它只是藏在我们心里的某个角落，等待我们用温柔的方式去找回它。</p>
<p>　　你的情绪小队里，谁是队长？他们又带给你了什么？也许，当你学会和他们对话时，会发现这些情绪不仅仅是情感的波澜，它们还是人生的答案。
　　  　　
　　希望我们都能与自己的情绪小队和平共处，在接纳它们的过程中，找到更完整的自己，<strong>拥抱独一无二的自己</strong>。</p>]]></content>
        </item>
        
        <item>
            <title>Obsidian自动化同步测试</title>
            <link>https://whistleditty.github.io/posts/obsidian%E8%87%AA%E5%8A%A8%E5%8C%96%E5%90%8C%E6%AD%A5%E6%B5%8B%E8%AF%95/</link>
            <pubDate>Sat, 21 Dec 2024 17:10:58 +0800</pubDate>
            
            <guid>https://whistleditty.github.io/posts/obsidian%E8%87%AA%E5%8A%A8%E5%8C%96%E5%90%8C%E6%AD%A5%E6%B5%8B%E8%AF%95/</guid>
            <description>&lt;pre&gt;&lt;code&gt;你好你好你好2024-12-21 20:30:57
&lt;/code&gt;&lt;/pre&gt;</description>
            <content type="html"><![CDATA[<pre><code>你好你好你好2024-12-21 20:30:57
</code></pre>
<p>成功了吗？
再试一次
成功了！</p>
<p>把代码贴上来好了：</p>
<pre tabindex="0"><code>#!/bin/bash
set -euo pipefail  # 设置严格的错误处理模式，遇到任何错误都会退出脚本

# Change to the script&#39;s directory
SCRIPT_DIR=&#34;$(cd &#34;$(dirname &#34;${BASH_SOURCE[0]}&#34;)&#34; &amp;&amp; pwd)&#34;  # 获取并切换到脚本所在的目录
cd &#34;$SCRIPT_DIR&#34;

# Set variables for Obsidian to Hugo copy
sourcePath=&#34;/Users/xiuhao/Library/Mobile Documents/iCloud~md~obsidian/Documents/个人/posts/&#34;  # 定义Obsidian笔记存放博客文章的路径
destinationPath=&#34;/Users/xiuhao/blog/hugosite/content/posts&#34;  # 定义Hugo内容文件夹的路径

# Set GitHub Repo
myrepo=&#34;git@github.com:whistleditty/whistleditty.github.io.git&#34;  # 定义GitHub上的远程仓库地址

# Set Hugo build and public directory
hugo_dir=&#34;/Users/xiuhao/blog/hugosite&#34;  # Hugo 项目根目录
public_dir=&#34;$hugo_dir/public&#34;  # Hugo 构建后生成的 public 目录

# Check for required commands
for cmd in git rsync python3 hugo; do  # 检查必要的命令是否存在
    if ! command -v $cmd &amp;&gt; /dev/null; then  # 如果命令不存在
        echo &#34;$cmd is not installed or not in PATH.&#34;  # 输出错误信息
        exit 1  # 退出脚本
    fi
done

# Step 1: Check if Git is initialized, and initialize if necessary
if [ ! -d &#34;.git&#34; ]; then  # 如果当前目录下没有.git文件夹
    echo &#34;Initializing Git repository...&#34;  # 输出初始化Git仓库的信息
    git init  # 初始化一个新的Git仓库
    git remote add origin $myrepo  # 添加远程仓库为origin
else
    echo &#34;Git repository already initialized.&#34;  # 输出Git仓库已经初始化的信息
    if ! git remote | grep -q &#39;origin&#39;; then  # 如果远程仓库列表中没有origin
        echo &#34;Adding remote origin...&#34;  # 输出添加远程仓库的信息
        git remote add origin $myrepo  # 添加远程仓库为origin
    fi
fi

# Step 2: Sync posts from Obsidian to Hugo content folder using rsync
echo &#34;Syncing posts from Obsidian...&#34;  # 输出同步博客文章的信息

if [ ! -d &#34;$sourcePath&#34; ]; then  # 如果源路径不存在
    echo &#34;Source path does not exist: $sourcePath&#34;  # 输出错误信息
    exit 1  # 退出脚本
fi

if [ ! -d &#34;$destinationPath&#34; ]; then  # 如果目标路径不存在
    echo &#34;Destination path does not exist: $destinationPath&#34;  # 输出错误信息
    exit 1  # 退出脚本
fi

rsync -av --delete &#34;$sourcePath&#34; &#34;$destinationPath&#34;  # 使用rsync同步文件，删除目标位置中源位置没有的内容


## Step 3: Process Markdown files with Python script to handle image links
#echo &#34;Processing image links in Markdown files...&#34;  # 输出处理Markdown文件中的图片链接的信息
#
#if [ ! -f &#34;images.py&#34; ]; then  # 如果Python脚本不存在
#    echo &#34;Python script images.py not found.&#34;  # 输出错误信息
#    exit 1  # 退出脚本
#fi
#
#if ! python3 images.py; then  # 运行Python脚本
#    echo &#34;Failed to process image links.&#34;  # 如果运行失败，输出错误信息
#    exit 1  # 退出脚本
#fi
#
# Step 4: Build the Hugo site
echo &#34;Building the Hugo site...&#34;  # 输出构建Hugo站点的信息
cd &#34;$hugo_dir&#34;  # 切换到 Hugo 项目目录

if ! hugo; then  # 调用Hugo命令生成静态网站
    echo &#34;Hugo build failed.&#34;  # 如果构建失败，输出错误信息
    exit 1  # 退出脚本
fi

# Step 5: Add changes to Git
echo &#34;Staging changes for Git...&#34;  # 输出将更改添加到Git暂存区的信息
cd &#34;$public_dir&#34;
if git diff --quiet &amp;&amp; git diff --cached --quiet; then  # 如果没有新的更改
    echo &#34;No changes to stage.&#34;  # 输出没有新更改的信息
else
    git add .  # 将所有更改添加到暂存区
fi

# Step 6: Commit changes with a dynamic message
commit_message=&#34;New Blog Post on $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&#34;  # 生成提交信息，包含当前日期和时间
if git diff --cached --quiet; then  # 如果没有新的更改需要提交
    echo &#34;No changes to commit.&#34;  # 输出没有新更改的信息
else
    echo &#34;Committing changes...&#34;  # 输出正在提交更改的信息
    git commit -m &#34;$commit_message&#34;  # 提交更改
fi

# Step 7: Push all changes to the main branch
echo &#34;Deploying to GitHub Main...&#34;  # 输出推送到主分支的信息

if ! git push origin master; then  # 推送本地更改到GitHub仓库的main分支
    echo &#34;Failed to push to main branch.&#34;  # 如果推送失败，输出错误信息
    exit 1  # 退出脚本
fi

# Step 8: Push the public folder to the hostinger branch using subtree split and force push
echo &#34;Deploying to GitHub Hostinger...&#34;  # 输出推送到Hostinger分支的信息

if git branch --list | grep -q &#39;hostinger-deploy&#39;; then  # 如果存在名为hostinger-deploy的分支
    git branch -D hostinger-deploy  # 删除该分支
fi

if ! git subtree split --prefix public -b hostinger-deploy; then  # 创建一个只包含public文件夹的新分支
    echo &#34;Subtree split failed.&#34;  # 如果创建失败，输出错误信息
    exit 1  # 退出脚本
fi

if ! git push origin hostinger-deploy:hostinger --force; then  # 强制推送新分支到远程仓库的hostinger分支
    echo &#34;Failed to push to hostinger branch.&#34;  # 如果推送失败，输出错误信息
    git branch -D hostinger-deploy  # 删除临时分支
    exit 1  # 退出脚本
fi

git branch -D hostinger-deploy  # 删除临时分支

echo &#34;All done! Site synced, processed, committed, built, and deployed.&#34;  # 输出完成所有操作的信息
</code></pre><p>从<a href="https://www.youtube.com/@NetworkChuck">NetworkChuck</a>的代码改来的，他直接上传了hugo整个文件夹，但似乎只要上传public文件夹就够了，他的部署方式似乎有点区别所以不能直接用？虽然脚本还在报错<code>'public' does not exist; use 'git subtree add' Subtree split failed.</code> 但能用就行了，不管啦。</p>]]></content>
        </item>
        
        <item>
            <title>第一篇文章</title>
            <link>https://whistleditty.github.io/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</link>
            <pubDate>Fri, 09 Feb 2024 15:34:04 +0900</pubDate>
            
            <guid>https://whistleditty.github.io/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
            <description>&lt;pre&gt;&lt;code&gt;今天我们之所以欢聚在这里，是为了庆祝我的blog正式被你发现了。
&lt;/code&gt;&lt;/pre&gt;</description>
            <content type="html"><![CDATA[<pre><code>今天我们之所以欢聚在这里，是为了庆祝我的blog正式被你发现了。
</code></pre>
<p>一个简单到不能再简单的博客，但折腾了很久。</p>
<p>希望我写的东西对你没用。</p>
<p><em>浪费时间在一些傻傻的东西上。</em></p>]]></content>
        </item>
        
        <item>
            <title>《宇宙探索编辑部》我的2023最佳电影</title>
            <link>https://whistleditty.github.io/posts/%E5%AE%87%E5%AE%99%E6%8E%A2%E7%B4%A2%E7%BC%96%E8%BE%91%E9%83%A8%E6%88%91%E7%9A%842023%E6%9C%80%E4%BD%B3%E7%94%B5%E5%BD%B1/</link>
            <pubDate>Sat, 30 Dec 2023 23:14:56 +0800</pubDate>
            
            <guid>https://whistleditty.github.io/posts/%E5%AE%87%E5%AE%99%E6%8E%A2%E7%B4%A2%E7%BC%96%E8%BE%91%E9%83%A8%E6%88%91%E7%9A%842023%E6%9C%80%E4%BD%B3%E7%94%B5%E5%BD%B1/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;我们之所以现在朝九晚五，上班下班，终究还是希望有一天，我们能够有机会，去探索宇宙的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>我们之所以现在朝九晚五，上班下班，终究还是希望有一天，我们能够有机会，去探索宇宙的。</p>
</blockquote>
<p>其实也说不清楚究竟是什么打动了我，但每片中一句台词和诗句，却是实实在在地构建起了一曲奇幻的交响乐。这部电影是如此的抽象，是无厘头的浪漫，我不止一次地思考，天才和疯子真的需要边界吗？当带入他们的视角，你知道这些是荒诞的，但又好像一切都能说得通。很好地拍出了理想主义者的内心世界。尽管这群人像是“疯子”一样，但他们的故事却充满了动人的力量。</p>
<p>（当然，我曾自诩为理想主义者，其实我的理想主义完全没有任何理论依据的，更确切地说是全凭直觉进行判断的情感或直觉主义。）
看的时候我就能感觉到，这注定是一部评价两极分化的电影。也将成为我最爱的电影。这种多样性正是电影艺术的魅力所在。这么说是为了表现自己的与众不同？只能说真的很对我的口味。
是什么？
是无厘头的浪漫，没有理由地相信。天才和疯子不需要有边界。
是偏执狂的自我救赎</p>
<h1 id="从民科现象-到-梦想与现实的冲突">从“民科”现象 到 梦想与现实的冲突</h1>
<blockquote>
<p>这不是普通的电视雪花点，这是宇宙诞生时的余晖。</p>
</blockquote>
<p>《世界观》一书中提到，“从任何一个世界观自身的角度来看，这一世界观的观点都显而易见是正确的。”
影片在描绘“民科”现象时，既包含了批判也蕴含了理解。它批判了那些缺乏科学依据的理论和行为，同时也理解并展现了这些“民科”背后的动机和情感。电影通过唐志军的坚持和遭遇的种种挫折，传达出他对宇宙探索的真挚情感，</p>
<p>尽管“民科”可能缺乏科学方法，也可能是由于现实条件的限制，无法接受正规的科学教育，但我认为，在如今科技和教育水平不断提高的年代，这种有趣的脑洞和信念是有意义的，对未知的好奇心和探索精神是值得肯定的，就像唐志军在电影中反复讲到的，<strong>“有好奇心是好事。”</strong>，人活着是为了自己而活，探索往往是出于对科学的热爱和对梦想的追求。即使现实充满挑战，但梦想本身是宝贵的，它给予人们前进的动力和生活的意义。</p>
<h1 id="从情感到哲思">从情感到哲思</h1>
<p>老唐是一个理想主义者，他对宇宙探索充满了热情和执着，有着坚定的信念，他是自由的，自洽的。这种追求超越了日常生活的琐碎，所谓的“生命维持餐”就是不向现实妥协的最好证明。</p>
<p>影片中的情感并非一成不变，而是随着剧情的发展而变化。唐志军从最初的执着和乐观，到后来的挫败和绝望，再到最终的接受和释然，这种情感的转变过程让观众能够跟随角色一起经历情感的起伏，在最后无声的诗中到达顶点。
并在父亲对女儿的情感和反思中引申到哲学的思考，他不理解的是，为什么宇宙有如此多值得探索的未知，女儿却轻言放弃。</p>
<p>通过对古典小说《西游记》的借鉴，将地外文明与地球上的古典文学结合起来，最终回归到对人类存在意义的探讨。整部影片最触动我的台词就是在这里出现：</p>
<blockquote>
<p>我们人类存在在这个宇宙的意义究竟是什么。
如果他们那么远过来，也是为了问我们这个问题呢？</p>
</blockquote>
<p>对于生死的探讨，对于存在和活着的意义的思考，我仍然没有结论，也许像影片给出的答案，
<strong>原来我们每一个人既是存在的迷题，也是这个迷题的答案</strong>，每个人本身就是其意义。也许人生其实就是一种对自我的取悦。只要能自洽地开心地活着，找到属于自己的方式，找到自己所迷恋之物。活出自己的样子，便是意义。</p>
<h1 id="拍摄方法">拍摄方法</h1>
<p>最后浅谈一下拍摄手法，一部“伪纪录片”式的拍摄，在闭眼那段情节直接打破了第四堵墙，使得观众仿佛成为了故事的一部分。让我联想到藤本树的漫画《再见绘梨》的场面。这种方法真正做到了形式服务于内容，模糊了真实与虚构的边界，荒诞的同时如果仔细思考又好像有一定道理。</p>
<p>自然光+肩抗，连演员都在怀疑是不是在好好拍戏的剧组。小预算的大电影，不仅展示了导演在小预算下的创意和技巧，也给予了电影业更多的可能性，证明了低成本也能将作品搬上大荧幕。</p>
<p>试着顶一口汤锅接收宇宙的信号吧。</p>]]></content>
        </item>
        
    </channel>
</rss>
